import { promises as fs } from 'fs';

// Fun√ß√£o simples para contar ve√≠culos em um arquivo XML
function countVehicles(xmlContent) {
  const itemMatches = xmlContent.match(/<Item>/g);
  return itemMatches ? itemMatches.length : 0;
}

// Fun√ß√£o para verificar se cont√©m ve√≠culos espec√≠ficos
function checkVehicles(xmlContent) {
  return {
    hasHarryPotterVI: xmlContent.includes('WRharrypotterVI'),
    hasHarryPotterIII: xmlContent.includes('WRharrypotterIII'),
    hasCarruagem: xmlContent.includes('wrcarruagem')
  };
}

async function testUnificacao() {
  console.log('üß™ TESTE DE UNIFICA√á√ÉO - Comparando Resultados\n');
  
  try {
    // Ler arquivos originais
    const vehicles1 = await fs.readFile('./metas/vehicles1.meta', 'utf8');
    const vehicles2 = await fs.readFile('./metas/vehicles2.meta', 'utf8');
    
    // Ler arquivo unificado pelo script original
    const unificadoOriginal = await fs.readFile('./novo_arquivo_unificado.meta', 'utf8');
    
    console.log('üìä AN√ÅLISE DOS ARQUIVOS:');
    console.log('========================');
    
    // Contar ve√≠culos nos arquivos originais
    const count1 = countVehicles(vehicles1);
    const count2 = countVehicles(vehicles2);
    const countUnificado = countVehicles(unificadoOriginal);
    
    console.log(`üìÅ vehicles1.meta: ${count1} ve√≠culos`);
    console.log(`üìÅ vehicles2.meta: ${count2} ve√≠culos`);
    console.log(`üìÅ Arquivo unificado: ${countUnificado} ve√≠culos`);
    console.log(`üìä Total esperado: ${count1 + count2} ve√≠culos\n`);
    
    // Verificar ve√≠culos espec√≠ficos
    const check1 = checkVehicles(vehicles1);
    const check2 = checkVehicles(vehicles2);
    const checkUnificado = checkVehicles(unificadoOriginal);
    
    console.log('üîç VERIFICA√á√ÉO DE VE√çCULOS ESPEC√çFICOS:');
    console.log('======================================');
    console.log(`WRharrypotterVI   - Original: ${check1.hasHarryPotterVI ? '‚úÖ' : '‚ùå'} | Unificado: ${checkUnificado.hasHarryPotterVI ? '‚úÖ' : '‚ùå'}`);
    console.log(`WRharrypotterIII  - Original: ${check1.hasHarryPotterIII ? '‚úÖ' : '‚ùå'} | Unificado: ${checkUnificado.hasHarryPotterIII ? '‚úÖ' : '‚ùå'}`);
    console.log(`wrcarruagem       - Original: ${check2.hasCarruagem ? '‚úÖ' : '‚ùå'} | Unificado: ${checkUnificado.hasCarruagem ? '‚úÖ' : '‚ùå'}\n`);
    
    // Resultado final
    const unificacaoCorreta = (
      countUnificado === (count1 + count2) &&
      checkUnificado.hasHarryPotterVI &&
      checkUnificado.hasHarryPotterIII &&
      checkUnificado.hasCarruagem
    );
    
    if (unificacaoCorreta) {
      console.log('üéâ RESULTADO: UNIFICA√á√ÉO FUNCIONANDO PERFEITAMENTE!');
      console.log('‚úÖ Todos os ve√≠culos foram unificados corretamente');
      console.log('‚úÖ O script original est√° funcionando como esperado');
      console.log('\nüìã PROVA: O arquivo novo_arquivo_unificado.meta cont√©m:');
      console.log(`   - ${count1} ve√≠culos do vehicles1.meta`);
      console.log(`   - ${count2} ve√≠culo do vehicles2.meta`);
      console.log(`   - Total: ${countUnificado} ve√≠culos unificados`);
    } else {
      console.log('‚ùå PROBLEMA: A unifica√ß√£o n√£o est√° funcionando corretamente');
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  }
}

// Executar teste
testUnificacao();